import numpy as np

# Даниел Чолаков ФК:2101681030  q=3 p=3

# Дефиниране на матрицата 'a', вектора 'b', началната стойност 'x' и толеранса
a = np.array([
    [12., -3., 1., 2.],
    [-2., 11., -3., 1.],
    [1., -5., 13., -2.],
    [3., 1., -1., -7.]
])
b = np.array([1, 6, -3, 3])
x = np.zeros(len(b), dtype=float)
eps = 0.0001  # толеранс
max_iter = 100  # максимален брой итерации, за да се избегне безкраен цикъл

# Разделяне на диагоналните и извъндиагоналните елементи за итеративното решение
d = b / np.diag(a)
c = np.eye(len(a)) - (a / np.diag(a).reshape(-1, 1))

# Печатане на началните матрици c и d в
print("c =")
print(np.array2string(c, formatter={'float_kind':lambda x: f"{x: .6f}"}))
print("d =")
print(np.array2string(d, formatter={'float_kind':lambda x: f"{x: .6f}"}))

# Итеративен процес
err = float('inf')
k = 0

while err >= eps and k < max_iter:
    x_new = c @ x + d
    err = np.max(np.abs(x_new - x))
    x = x_new
    print(f"k= {k+1}, x = [{', '.join([f'{xi: .6f}' for xi in x])}], текуща грешка err = {err:.6f}")
    k += 1

# Изчисление на нормите за сближаване
norm_c_inf = np.max(np.sum(np.abs(c), axis=1))  # Безкрайна норма
norm_c_one = np.max(np.sum(np.abs(c), axis=0))  # Единична норма
norm_c_fro = np.sqrt(np.sum(c**2))  # Норма на Фробениус

# Печатане на нормите в стил на Wolfram
print(f"Нормите на преобразуваната матрица са : ({norm_c_inf:.6f}, {norm_c_one:.6f}, {norm_c_fro:.6f})")


# c =
# [[ 0.000000  0.250000 -0.083333 -0.166667]
#  [ 0.181818  0.000000  0.272727 -0.090909]
#  [-0.076923  0.384615  0.000000  0.153846]
#  [ 0.428571  0.142857 -0.142857  0.000000]]
# d =
# [ 0.083333  0.545455 -0.230769 -0.428571]
# k= 1, x = [ 0.083333,  0.545455, -0.230769, -0.428571], текуща грешка err = 0.545455
# k= 2, x = [ 0.310356,  0.536630, -0.093323, -0.281968], текуща грешка err = 0.227023
# k= 3, x = [ 0.272262,  0.602065, -0.091626, -0.205568], текуща грешка err = 0.076400
# k= 4, x = [ 0.275746,  0.588656, -0.051775, -0.212789], текуща грешка err = 0.039851
# k= 5, x = [ 0.270277,  0.600814, -0.058311, -0.218904], текуща грешка err = 0.012158
# k= 6, x = [ 0.274880,  0.598593, -0.054155, -0.218578], текуща грешка err = 0.004604
# k= 7, x = [ 0.273924,  0.600534, -0.055313, -0.217516], текуща грешка err = 0.001941
# k= 8, x = [ 0.274329,  0.599948, -0.054330, -0.217483], текуща грешка err = 0.000983
# k= 9, x = [ 0.274095,  0.600287, -0.054581, -0.217534], текуща грешка err = 0.000339
# k= 10, x = [ 0.274209,  0.600180, -0.054441, -0.217550], текуща грешка err = 0.000140
# k= 11, x = [ 0.274173,  0.600240, -0.054493, -0.217536], текуща грешка err = 0.000061
# Нормите на преобразуваната матрица са : (0.714286, 0.777473, 0.784174)